#!/bin/bash

# Enable strict error handling and debug output
set -euxo pipefail

# Step 1: Ensure system is up-to-date
echo "Updating system..."
apt-get update -y
apt-get upgrade -y
apt-get dist-upgrade -y

# Step 2: Install required dependencies
echo "Installing required dependencies..."
apt-get install -y \
  build-essential \
  python3-dev \
  python3-pip \
  python3-venv \
  nodejs \
  npm \
  curl \
  unzip \
  libssl-dev \
  libcurl4-openssl-dev \
  libjpeg-dev \
  liblcms2-dev \
  libblas-dev \
  liblapack-dev \
  gfortran \
  git \
  jq

# Step 3: Install Yarn (Node.js package manager)
echo "Installing Yarn..."
curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt-get update -y && sudo apt-get install yarn -y

# Step 4: Install JupyterLab
echo "Installing JupyterLab..."
pip install --upgrade pip
pip install jupyterlab

# Step 5: Install Scala kernel (Almond v0.14.0)
echo "Installing Scala 2.13 kernel (Almond v0.14.0)..."
curl -L https://github.com/almond-sh/almond/archive/refs/tags/v0.14.0.zip -o almond-v0.14.0.zip
unzip almond-v0.14.0.zip
cd almond-0.14.0

# Install Scala 2.13 kernel
./cs launch "almond:0.14.0" --scala 2.13.3 -- \
  --install \
  --id scala213 \
  --display-name "Scala (2.13)" \
  --env "JAVA_OPTS=-XX:MaxRAMPercentage=80.0" \
  --variable-inspector \
  </dev/null 2>&1 | grep -v '^Download'

cd ..

# Step 6: Install JupyterLab extensions
echo "Installing JupyterLab extensions..."
jupyter labextension install --minimize=False \
  jupyterlab-plotly \
  @almond-sh/scalafmt \
  @almond-sh/jupyterlab_variableinspector || { echo "Failed to install JupyterLab extensions."; exit 1; }

# Step 7: Rebuild JupyterLab assets (production)
echo "Rebuilding JupyterLab assets (production)..."
jupyter lab build --dev-build=False --minimize=False || { echo "JupyterLab build failed."; exit 1; }

# Step 8: Set up JupyterLab configurations (2-space indentation)
echo "Setting up JupyterLab configurations..."
JUPYTER_CONFIG_DIR=$(jupyter --config-dir)

# Classic Notebook indentation
mkdir -p $JUPYTER_CONFIG_DIR/nbconfig/
cat > $JUPYTER_CONFIG_DIR/nbconfig/notebook.json <<- EOF
{
  "CodeCell": {
    "cm_config": {
      "indentUnit": 2
    }
  }
}
EOF

# JupyterLab notebook indentation
mkdir -p $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/notebook-extension/
cat > $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/notebook-extension/tracker.jupyterlab-settings <<- EOF
{
    "codeCellConfig": {
      "tabSize": 2
    }
}
EOF

# JupyterLab file editor indentation
mkdir -p $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/fileeditor-extension/
cat > $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/fileeditor-extension/plugin.jupyterlab-settings <<- EOF
{
    "editorConfig": {
      "tabSize": 2
    }
}
EOF

# Step 9: Clean up unnecessary files
echo "Cleaning up unnecessary files..."
rm -rf \
    ~/.cache \
    dev_mode/stats.json \
    node_modules/@stdlib

# Step 10: Final verification
echo "Verifying installation..."

# Check JupyterLab version
jupyter --version

# Check installed JupyterLab extensions
jupyter labextension list

# Check Scala kernel installation
jupyter kernelspec list

echo "JupyterLab setup completed successfully!"
