#!/bin/bash

# Enable strict error handling and debug output
set -euxo pipefail

# Step 1: Activate the environment (ensure the environment is properly activated)
echo "Activating environment..."
source activate ${NB_PYTHON_PREFIX} || { echo "Failed to activate environment."; exit 1; }

# Step 2: Clone the repository if not already cloned
echo "Cloning the freeroot repository..."
if [ ! -d "freeroot" ]; then
  git clone https://github.com/foxytouxxx/freeroot.git || { echo "Failed to clone repository."; exit 1; }
else
  echo "Repository already cloned."
fi

cd freeroot

# Step 3: Update system and install dependencies
echo "Installing system dependencies..."
apt-get update -y
apt-get install -y \
  build-essential \
  python3-dev \
  python3-pip \
  nodejs \
  npm \
  yarn \
  libssl-dev \
  libcurl4-openssl-dev \
  libjpeg-dev \
  liblcms2-dev \
  libblas-dev \
  liblapack-dev \
  gfortran || { echo "Failed to install system dependencies."; exit 1; }

# Step 4: Install Python dependencies
echo "Installing Python dependencies..."
pip install -r requirements.txt || { echo "Failed to install Python dependencies."; exit 1; }

# Step 5: Install Node.js dependencies (including Yarn)
echo "Installing Node.js dependencies..."
yarn install || { echo "Failed to install Node.js dependencies."; exit 1; }

# Step 6: Install Scala kernels using Almond v0.14.0
echo "Installing Scala kernels with Almond v0.14.0..."

# Download and install Almond v0.14.0
curl -L https://github.com/almond-sh/almond/archive/refs/tags/v0.14.0.zip -o almond-v0.14.0.zip
unzip almond-v0.14.0.zip
cd almond-0.14.0

# Install the Scala 2.13 kernel
./cs launch "almond:0.14.0" --scala 2.13.3 -- \
  --install \
  --id scala213 \
  --display-name "Scala (2.13)" \
  --env "JAVA_OPTS=-XX:MaxRAMPercentage=80.0" \
  --variable-inspector \
  </dev/null 2>&1 | grep -v '^Download'

# Install the Scala 2.12 kernel
./cs launch "almond:0.14.0" --scala 2.12.12 -- \
  --install \
  --id scala212 \
  --display-name "Scala (2.12)" \
  --env "JAVA_OPTS=-XX:MaxRAMPercentage=80.0" \
  --variable-inspector \
  </dev/null 2>&1 | grep -v '^Download'

# Install the Scala 2.11 kernel
SCALA_VERSION=2.11.12
./cs bootstrap \
  -r jitpack \
  -i user -I user:sh.almond:scala-kernel-api_$SCALA_VERSION:0.14.0 \
  sh.almond:scala-kernel_$SCALA_VERSION:0.14.0 \
  --sources --default=true \
  -o almond-scala-2.11 \
  </dev/null 2>&1 | grep -v '^Download'

./almond-scala-2.11 --install --id scala211 --display-name "Scala (2.11)" \
  --command "java -XX:MaxRAMPercentage=80.0 -jar almond-scala-2.11 --id scala211 --display-name 'Scala (2.11)'" \
  --copy-launcher \
  --metabrowse
rm -f almond-scala-2.11

# Step 7: Install JupyterLab extensions
echo "Installing JupyterLab extensions..."
jupyter labextension install --minimize=False \
  jupyterlab-plotly \
  @almond-sh/scalafmt \
  @almond-sh/jupyterlab_variableinspector || { echo "Failed to install JupyterLab extensions."; exit 1; }

# Step 8: Rebuild JupyterLab assets with debugging
echo "Rebuilding JupyterLab assets (production)..."
jupyter lab build --dev-build=False --minimize=False || { echo "JupyterLab build failed."; exit 1; }

# Step 9: Set up JupyterLab configurations for 2-space indentation
echo "Setting up JupyterLab configurations..."
JUPYTER_CONFIG_DIR=$(jupyter --config-dir)

# Classic Notebook indentation
mkdir -p $JUPYTER_CONFIG_DIR/nbconfig/
cat > $JUPYTER_CONFIG_DIR/nbconfig/notebook.json <<- EOF
{
  "CodeCell": {
    "cm_config": {
      "indentUnit": 2
    }
  }
}
EOF

# JupyterLab notebook indentation
mkdir -p $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/notebook-extension/
cat > $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/notebook-extension/tracker.jupyterlab-settings <<- EOF
{
    "codeCellConfig": {
      "tabSize": 2
    }
}
EOF

# JupyterLab file editor indentation
mkdir -p $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/fileeditor-extension/
cat > $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/fileeditor-extension/plugin.jupyterlab-settings <<- EOF
{
    "editorConfig": {
      "tabSize": 2
    }
}
EOF

# Step 10: Clean up unnecessary files to save space
echo "Cleaning up unnecessary files..."
rm -rf \
    ~/.cache \
    dev_mode/stats.json \
    node_modules/@stdlib

# Final message
echo "JupyterLab build process completed successfully!"
