#!/bin/bash

# Enable debugging and strict error handling
set -euxo pipefail

# Step 1: Ensure the environment is properly activated
# If you're using conda or a similar environment manager, ensure it's activated.
source activate ${NB_PYTHON_PREFIX}

# Step 2: Create a directory to store all build reports and logs
mkdir -p _reports_

# Step 3: Install nodejs dependencies using Yarn and log the output
echo "Installing Yarn dependencies..."
(time yarn) 2>&1 | tee _reports_/00_yarn.txt

# Step 4: Build JupyterLab assets (this can take some time)
echo "Building JupyterLab assets (dev and prod)..."
(time yarn build:dev:prod:minimize:report) 2>&1 | tee _reports_/01_build.txt

# Step 5: Move the Webpack bundle analyzer for later inspection
mv dev_mode/static/webpack-bundle-analyzer.html _reports/

# Step 6: Install Python dependencies from the development environment
echo "Installing Python dependencies..."
(time pip install -v -e .[dev] --no-build-isolation) 2>&1 | tee _reports_/02_pip_install.txt

# Step 7: Copy Jupyter configuration to the appropriate directory
echo "Copying Jupyter configuration..."
mkdir -p ~/.jupyter
cp binder/jupyter_config.py ~/.jupyter/

# Step 8: Capture Python-related information (helpful for debugging)
echo "Capturing Python info for debugging..."
(time pip list) 2>&1 | tee _reports_/03_pip_list.txt
(time pip check || echo FAIL) 2>&1 | tee _reports_/04_pip_check.txt

# Step 9: Run Jupyter's troubleshooting tools and capture their output
echo "Running Jupyter troubleshooting..."
(time jupyter troubleshoot) 2>&1 | tee _reports_/10_troubleshoot.txt
(time jupyter notebook --show-config) 2>&1 | tee _reports_/11_notebook_show_config.txt
(time jupyter lab --show-config) 2>&1 | tee _reports_/12_lab_show_config.txt

# Step 10: List server extensions installed in JupyterLab
echo "Listing server extensions..."
(time jupyter server extension list) 2>&1 | tee _reports_/13_server_extension_list.txt

# Step 11: List JupyterLab extensions installed
echo "Listing JupyterLab extensions..."
(time jupyter labextension list) 2>&1 | tee _reports_/14_labextension_list.txt

# Step 12: Install required Scala kernels using Almond (Scala 2.13, 2.12, and 2.11)
echo "Installing Scala kernels..."
./cs launch "almond:$ALMOND_VERSION" --scala 2.13.3 -- \
  --install \
  --id scala213 \
  --display-name "Scala (2.13)" \
  --env "JAVA_OPTS=-XX:MaxRAMPercentage=80.0" \
  --variable-inspector \
  </dev/null 2>&1 | grep -v '^Download'

./cs launch "almond:$ALMOND_VERSION" --scala 2.12.12 -- \
  --install \
  --id scala212 \
  --display-name "Scala (2.12)" \
  --env "JAVA_OPTS=-XX:MaxRAMPercentage=80.0" \
  --variable-inspector \
  </dev/null 2>&1 | grep -v '^Download'

# Install Almond for Scala 2.11 (version 0.6.0)
SCALA_VERSION=2.11.12 ALMOND_VERSION=0.6.0
./cs bootstrap \
  -r jitpack \
  -i user -I user:sh.almond:scala-kernel-api_$SCALA_VERSION:$ALMOND_VERSION \
  sh.almond:scala-kernel_$SCALA_VERSION:$ALMOND_VERSION \
  --sources --default=true \
  -o almond-scala-2.11 \
  </dev/null 2>&1 | grep -v '^Download'

./almond-scala-2.11 --install --id scala211 --display-name "Scala (2.11)" \
  --command "java -XX:MaxRAMPercentage=80.0 -jar almond-scala-2.11 --id scala211 --display-name 'Scala (2.11)'" \
  --copy-launcher \
  --metabrowse
rm -f almond-scala-2.11

# Step 13: Install necessary JupyterLab extensions (Plotly, ScalaFmt, Variable Inspector)
echo "Installing JupyterLab extensions..."
jupyter labextension install --minimize=False \
  jupyterlab-plotly \
  @almond-sh/scalafmt \
  @almond-sh/jupyterlab_variableinspector || echo "Failed to install extensions"

# Step 14: Rebuild JupyterLab assets with debugging enabled (this should catch more specific errors)
echo "Rebuilding JupyterLab assets with debugging enabled..."
jupyter lab build --dev-build=False --minimize=False || echo "JupyterLab build failed"

# Step 15: Configure Jupyter to use 2-space indentation for code cells
echo "Configuring JupyterLab to use 2-space indentation..."
JUPYTER_CONFIG_DIR=$(jupyter --config-dir)

# Configure classic notebook for 2-space indentation
mkdir -p $JUPYTER_CONFIG_DIR/nbconfig/
cat > $JUPYTER_CONFIG_DIR/nbconfig/notebook.json <<- EOF
{
  "CodeCell": {
    "cm_config": {
      "indentUnit": 2
    }
  }
}
EOF

# JupyterLab notebook settings for indentation
mkdir -p $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/notebook-extension/
cat > $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/notebook-extension/tracker.jupyterlab-settings <<- EOF
{
    "codeCellConfig": {
      "tabSize": 2
    }
}
EOF

# JupyterLab file editor settings for indentation
mkdir -p $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/fileeditor-extension/
cat > $JUPYTER_CONFIG_DIR/lab/user-settings/@jupyterlab/fileeditor-extension/plugin.jupyterlab-settings <<- EOF
{
    "editorConfig": {
      "tabSize": 2
    }
}
EOF

# Step 16: Clean up to save space
echo "Cleaning up unnecessary files..."
rm -rf \
    ~/.cache \
    dev_mode/stats.json \
    node_modules/@stdlib

# Final step: Report the build status and any errors encountered
echo "JupyterLab build process completed. Review the logs for any errors or warnings."
